datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String  @id @default(uuid())
  clerkId   String  @unique
  email     String  @unique
  firstName String?
  lastName  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workflows        Workflow[]
  googleCredential GoogleCredential?
  slackCredential  SlackCredential?
  connections      Connection[]
}

model GoogleCredential {
  id          String @id @default(uuid())
  accessToken String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User        User         @relation(fields: [userId], references: [clerkId])
  userId      String       @unique
  connections Connection[]
}

model SlackCredential {
  id          String @id @default(uuid())
  accessToken String @unique
  idToken     String @unique
  slackUserId String @unique
  teamId      String
  teamName    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User        User         @relation(fields: [userId], references: [clerkId])
  userId      String       @unique
  connections Connection[]
}

model Connection {
  id String @id @default(uuid())

  User               User             @relation(fields: [userId], references: [clerkId])
  userId             String           @unique
  GoogleCredential   GoogleCredential @relation(fields: [googleCredentialId], references: [id])
  googleCredentialId String           @unique
  SlackCredential    SlackCredential? @relation(fields: [slackCredentialId], references: [id])
  slackCredentialId  String?          @unique
}

model Workflow {
  id              String  @id @default(uuid())
  name            String
  description     String?
  published       Boolean @default(false)
  nodes           String?
  edges           String?
  flowPaths       String?
  driveResourceId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User   @relation(fields: [userId], references: [clerkId])
  userId String
}

model WorkflowConnector {
  id          String            @id @default(uuid())
  name        String
  description String?
  nodeType    ConnectorNodeType
  dataType    ConnectorDataType

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ConnectorNodeType {
  Action
  Trigger
  Logical
}

enum ConnectorDataType {
  GoogleDrive
  Gmail
  GoogleCalendar
  Notion
  Slack
  Discord
  Condition
  TimeDelay
  None
}
